#!/usr/bin/env python3

"""
Script de prueba simplificado para verificar el diagn√≥stico
"""

import rospy
import time
import subprocess
from datetime import datetime

def test_basic_checks():
    """Prueba b√°sica del sistema"""
    print("üîç Iniciando prueba b√°sica del sistema...")
    
    # Verificar ROS master
    print("1Ô∏è‚É£ Verificando master de ROS...")
    try:
        topics = rospy.get_published_topics()
        print("‚úì Master de ROS est√° ejecut√°ndose")
        print(f"  - T√≥picos disponibles: {len(topics)}")
    except Exception as e:
        print(f"‚úó Master de ROS no est√° ejecut√°ndose: {e}")
        return False
    
    # Verificar driver
    print("2Ô∏è‚É£ Verificando driver Atriz RVR...")
    try:
        result = subprocess.run(['pgrep', '-f', 'Atriz_rvr_node.py'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úì Driver Atriz RVR est√° ejecut√°ndose")
            print(f"  - PID: {result.stdout.strip()}")
        else:
            print("‚úó Driver Atriz RVR no est√° ejecut√°ndose")
            return False
    except Exception as e:
        print(f"‚úó Error verificando driver: {e}")
        return False
    
    # Verificar t√≥picos espec√≠ficos
    print("3Ô∏è‚É£ Verificando t√≥picos espec√≠ficos...")
    expected_topics = ['/odom', '/imu', '/cmd_vel', '/cmd_degrees']
    available_topics = [topic[0] for topic in topics]
    
    for topic in expected_topics:
        if topic in available_topics:
            print(f"‚úì T√≥pico {topic} disponible")
        else:
            print(f"‚úó T√≥pico {topic} no disponible")
    
    # Verificar nodos
    print("4Ô∏è‚É£ Verificando nodos...")
    try:
        nodes = rospy.get_node_names()
        print(f"‚úì Nodos activos: {len(nodes)}")
        for node in nodes:
            print(f"  - {node}")
    except Exception as e:
        print(f"‚úó Error obteniendo nodos: {e}")
    
    print("‚úÖ Prueba b√°sica completada")
    return True

def main():
    """Funci√≥n principal"""
    try:
        rospy.init_node('test_diagnostic', anonymous=True)
        test_basic_checks()
    except rospy.ROSInterruptException:
        print("Prueba interrumpida")
    except Exception as e:
        print(f"Error en la prueba: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
