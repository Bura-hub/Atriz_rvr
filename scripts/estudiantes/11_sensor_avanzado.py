#!/usr/bin/env python3
"""
Script 2: Sensor de Color del Sphero RVR
Este script ense√±a c√≥mo leer el sensor de color y tomar decisiones

INSTRUCCIONES:
1. Aseg√∫rate de que el robot est√© conectado y ROS est√© corriendo
2. Ejecuta: python3 2_sensor_color.py
3. Selecciona el modo que deseas probar
4. Experimenta con diferentes colores
"""

# ============================================
# IMPORTACIONES
# ============================================
import rospy
from atriz_rvr_msgs.msg import Color  # Mensaje personalizado para color
from geometry_msgs.msg import Twist   # Para controlar movimiento
from std_srvs.srv import SetBool     # Servicio para activar/desactivar sensor
import time
import signal                         # Para manejar se√±ales del sistema (Ctrl+C)
import sys                            # Para salir del programa

# ============================================
# CLASE PRINCIPAL
# ============================================
class DetectorColor:
    """
    Esta clase lee el sensor de color y controla el robot seg√∫n el color detectado
    """
    
    def __init__(self):
        """
        Constructor: Inicializa el detector de color
        """
        rospy.init_node('detector_color', anonymous=True)
        
        # Variables para almacenar informaci√≥n
        self.ultimo_color = None        # √öltimo color detectado
        self.confianza = 0              # Confianza de la detecci√≥n (0-100)
        self.contador_lecturas = 0      # Contador de lecturas
        
        # Crear suscriptor al t√≥pico de color
        # Cada vez que llegue un mensaje, se llamar√° a self.callback_color
        rospy.Subscriber('/color', Color, self.callback_color)
        
        # Crear publicador para controlar el robot
        self.publisher_movimiento = rospy.Publisher('/cmd_vel', Twist, queue_size=10)
        
        # Esperar a que el servicio est√© disponible
        rospy.loginfo("‚è≥ Esperando servicio /enable_color...")
        rospy.wait_for_service('/enable_color')
        
        # Crear cliente del servicio para habilitar el sensor
        self.servicio_color = rospy.ServiceProxy('/enable_color', SetBool)
        
        # Configurar manejador de se√±ales para Ctrl+C
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        rospy.loginfo("=" * 60)
        rospy.loginfo("‚úÖ Detector de color iniciado")
        rospy.loginfo("üì° Suscrito a: /color")
        rospy.loginfo("‚ö†Ô∏è  Presiona Ctrl+C para detener el robot y salir")
        rospy.loginfo("=" * 60)
        
    def callback_color(self, msg):
        """
        Esta funci√≥n se llama autom√°ticamente cada vez que llega un mensaje de color
        
        Args:
            msg: Mensaje de tipo Color que contiene:
                - rgb_color: Lista [R, G, B] con valores 0-255
                - confidence: Confianza de la detecci√≥n 0-100
        """
        # Extraer valores RGB del mensaje y convertir a enteros
        r = int(msg.rgb_color[0])
        g = int(msg.rgb_color[1])
        b = int(msg.rgb_color[2])
        
        # Guardar informaci√≥n
        self.ultimo_color = [r, g, b]
        self.confianza = int(msg.confidence)  # Convertir a entero
        self.contador_lecturas += 1
        
        # Identificar el color dominante
        color_nombre = self.identificar_color(r, g, b)
        
        # Mostrar informaci√≥n cada 10 lecturas para no saturar la pantalla
        if self.contador_lecturas % 10 == 0:
            rospy.loginfo(f"üé® Color: {color_nombre:12s} | RGB: ({r:3d}, {g:3d}, {b:3d}) | Confianza: {self.confianza:3d}%")
    
    def identificar_color(self, r, g, b):
        """
        Identifica el color dominante bas√°ndose en los valores RGB
        
        Args:
            r, g, b: Valores de Rojo, Verde y Azul (0-255)
        
        Returns:
            String con el nombre del color detectado
        """
        # IMPORTANTE: Estos umbrales son aproximados
        # Cada grupo deber√° ajustarlos seg√∫n su pista
        
        # Calcular cu√°l componente es mayor
        max_val = max(r, g, b)
        min_val = min(r, g, b)
        
        # Si todos los valores son similares
        if max_val - min_val < 30:
            if max_val > 200:
                return "BLANCO"
            elif max_val < 50:
                return "NEGRO"
            else:
                return "GRIS"
        
        # Identificar color dominante
        if r > g and r > b:
            if r > 150:
                return "ROJO"
        elif g > r and g > b:
            if g > 150:
                return "VERDE"
        elif b > r and b > g:
            if b > 150:
                return "AZUL"
        
        # Colores secundarios
        if r > 150 and g > 150 and b < 100:
            return "AMARILLO"
        elif r > 150 and b > 150 and g < 100:
            return "MAGENTA"
        elif g > 150 and b > 150 and r < 100:
            return "CYAN"
        
        return "DESCONOCIDO"
    
    def habilitar_sensor(self, estado=True):
        """
        Activa o desactiva el sensor de color
        
        Args:
            estado: True para activar, False para desactivar
        """
        try:
            respuesta = self.servicio_color(estado)
            if respuesta.success:
                accion = "activado" if estado else "desactivado"
                rospy.loginfo(f"‚úÖ Sensor de color {accion}")
            else:
                rospy.logwarn(f"‚ö†Ô∏è  No se pudo cambiar estado del sensor")
        except rospy.ServiceException as e:
            rospy.logerr(f"‚ùå Error al llamar servicio: {e}")
    
    def reaccionar_a_color(self, color_nombre):
        """
        Controla el robot seg√∫n el color detectado
        
        Args:
            color_nombre: Nombre del color detectado
        """
        cmd = Twist()
        
        # REGLAS DE COMPORTAMIENTO (puedes modificarlas)
        if color_nombre == "ROJO":
            # Si detecta ROJO: Detenerse
            cmd.linear.x = 0.0
            cmd.angular.z = 0.0
            rospy.loginfo("üî¥ ROJO detectado - DETENIENDO")
            
        elif color_nombre == "VERDE":
            # Si detecta VERDE: Avanzar
            cmd.linear.x = 0.3
            cmd.angular.z = 0.0
            rospy.loginfo("üü¢ VERDE detectado - AVANZANDO")
            
        elif color_nombre == "AZUL":
            # Si detecta AZUL: Girar a la izquierda
            cmd.linear.x = 0.0
            cmd.angular.z = 0.5
            rospy.loginfo("üîµ AZUL detectado - GIRANDO IZQUIERDA")
            
        elif color_nombre == "AMARILLO":
            # Si detecta AMARILLO: Girar a la derecha
            cmd.linear.x = 0.0
            cmd.angular.z = -0.5
            rospy.loginfo("üü° AMARILLO detectado - GIRANDO DERECHA")
            
        elif color_nombre == "NEGRO":
            # NEGRO es t√≠pico de una l√≠nea - √∫til para seguidor
            cmd.linear.x = 0.2
            cmd.angular.z = 0.0
            rospy.loginfo("‚ö´ NEGRO detectado - AVANCE LENTO")
            
        elif color_nombre == "BLANCO":
            # BLANCO es el fondo t√≠pico
            cmd.linear.x = 0.3
            cmd.angular.z = 0.0
            rospy.loginfo("‚ö™ BLANCO detectado - AVANCE NORMAL")
            
        # Enviar comando al robot
        self.publisher_movimiento.publish(cmd)
    
    def modo_monitoreo(self, duracion=30.0):
        """
        Modo que solo monitorea y muestra los colores detectados
        
        Args:
            duracion: Tiempo de monitoreo en segundos
        """
        rospy.loginfo("")
        rospy.loginfo("=" * 60)
        rospy.loginfo("üîç MODO MONITOREO DE COLORES")
        rospy.loginfo(f"üìä Monitoreando durante {duracion} segundos")
        rospy.loginfo("üí° Mueve el robot sobre diferentes superficies")
        rospy.loginfo("=" * 60)
        rospy.loginfo("")
        
        # Activar sensor
        self.habilitar_sensor(True)
        
        # Esperar el tiempo especificado
        rospy.sleep(duracion)
        
        # Desactivar sensor
        self.habilitar_sensor(False)
        
        rospy.loginfo("")
        rospy.loginfo("=" * 60)
        rospy.loginfo(f"‚úÖ Monitoreo completado - Total lecturas: {self.contador_lecturas}")
        rospy.loginfo("=" * 60)
    
    def modo_reaccion(self, duracion=60.0):
        """
        Modo que hace reaccionar al robot seg√∫n el color detectado
        
        Args:
            duracion: Tiempo de reacci√≥n en segundos
        """
        rospy.loginfo("")
        rospy.loginfo("=" * 60)
        rospy.loginfo("ü§ñ MODO REACCI√ìN A COLORES")
        rospy.loginfo(f"‚è±Ô∏è  Reaccionando durante {duracion} segundos")
        rospy.loginfo("‚ö†Ô∏è  ASEG√öRATE DE QUE HAY ESPACIO LIBRE")
        rospy.loginfo("=" * 60)
        rospy.loginfo("")
        
        # Esperar confirmaci√≥n
        input("Presiona ENTER para comenzar...")
        
        # Activar sensor
        self.habilitar_sensor(True)
        
        rate = rospy.Rate(10)  # 10 Hz
        start_time = time.time()
        
        while (time.time() - start_time) < duracion and not rospy.is_shutdown():
            # Si tenemos un color detectado, reaccionar
            if self.ultimo_color is not None:
                r, g, b = self.ultimo_color
                color_nombre = self.identificar_color(r, g, b)
                self.reaccionar_a_color(color_nombre)
            
            rate.sleep()
        
        # Detener robot y desactivar sensor
        self.detener_robot()
        self.habilitar_sensor(False)
        
        rospy.loginfo("")
        rospy.loginfo("=" * 60)
        rospy.loginfo("‚úÖ Modo reacci√≥n completado")
        rospy.loginfo("=" * 60)
    
    def calibrar_colores(self, duracion_por_color=5.0):
        """
        Modo de calibraci√≥n: ayuda a identificar los valores RGB de cada color
        
        Args:
            duracion_por_color: Tiempo para medir cada color
        """
        colores_calibrar = ["BLANCO", "NEGRO", "ROJO", "VERDE", "AZUL"]
        resultados = {}
        
        rospy.loginfo("")
        rospy.loginfo("=" * 60)
        rospy.loginfo("üéØ MODO CALIBRACI√ìN DE COLORES")
        rospy.loginfo("=" * 60)
        rospy.loginfo("üìã Instrucciones:")
        rospy.loginfo("   1. Prepara papeles o superficies de cada color")
        rospy.loginfo("   2. Cuando se indique, coloca el robot sobre ese color")
        rospy.loginfo("   3. Presiona ENTER para iniciar la medici√≥n")
        rospy.loginfo("   4. Anota los valores RGB obtenidos")
        rospy.loginfo("=" * 60)
        rospy.loginfo("")
        
        # Activar sensor
        self.habilitar_sensor(True)
        rospy.sleep(1.0)
        
        for color in colores_calibrar:
            rospy.loginfo("")
            rospy.loginfo(f"üìè COLOR A CALIBRAR: {color}")
            rospy.loginfo(f"   Coloca el robot sobre una superficie de color {color}")
            input(f"   Presiona ENTER cuando est√© listo...")
            
            # Reiniciar mediciones
            mediciones_r = []
            mediciones_g = []
            mediciones_b = []
            
            # Tomar mediciones
            rospy.loginfo(f"   ‚è≥ Tomando mediciones durante {duracion_por_color} segundos...")
            start_time = time.time()
            while (time.time() - start_time) < duracion_por_color:
                if self.ultimo_color is not None:
                    mediciones_r.append(self.ultimo_color[0])
                    mediciones_g.append(self.ultimo_color[1])
                    mediciones_b.append(self.ultimo_color[2])
                rospy.sleep(0.1)
            
            # Calcular promedios
            if len(mediciones_r) > 0:
                r_avg = sum(mediciones_r) / len(mediciones_r)
                g_avg = sum(mediciones_g) / len(mediciones_g)
                b_avg = sum(mediciones_b) / len(mediciones_b)
                
                resultados[color] = {
                    'R': r_avg,
                    'G': g_avg,
                    'B': b_avg,
                    'muestras': len(mediciones_r)
                }
                
                rospy.loginfo(f"   ‚úÖ Resultado: R={r_avg:.1f}, G={g_avg:.1f}, B={b_avg:.1f} ({len(mediciones_r)} muestras)")
        
        # Mostrar resumen
        rospy.loginfo("")
        rospy.loginfo("=" * 60)
        rospy.loginfo("üìä RESUMEN DE CALIBRACI√ìN")
        rospy.loginfo("=" * 60)
        rospy.loginfo("")
        rospy.loginfo("Color      |    R    |    G    |    B    ")
        rospy.loginfo("-" * 60)
        for color, valores in resultados.items():
            rospy.loginfo(f"{color:10s} | {valores['R']:6.1f} | {valores['G']:6.1f} | {valores['B']:6.1f}")
        rospy.loginfo("=" * 60)
        rospy.loginfo("")
        rospy.loginfo("üí° Usa estos valores para ajustar la funci√≥n 'identificar_color()'")
        rospy.loginfo("=" * 60)
        
        # Desactivar sensor
        self.habilitar_sensor(False)
    
    def detener_robot(self):
        """
        Detiene el robot completamente
        """
        cmd = Twist()
        cmd.linear.x = 0.0
        cmd.angular.z = 0.0
        
        for _ in range(10):
            self.publisher_movimiento.publish(cmd)
            rospy.sleep(0.1)
    
    def signal_handler(self, signum, frame):
        """
        Manejador de se√±ales para Ctrl+C y otras interrupciones
        
        Args:
            signum: N√∫mero de la se√±al recibida
            frame: Frame actual de ejecuci√≥n
        """
        rospy.logwarn("")
        rospy.logwarn("=" * 60)
        rospy.logwarn("‚ö†Ô∏è  SE√ëAL DE INTERRUPCI√ìN RECIBIDA (Ctrl+C)")
        rospy.logwarn("üõë Deteniendo robot y desactivando sensor...")
        rospy.logwarn("=" * 60)
        
        # Detener el robot inmediatamente
        self.detener_robot()
        
        # Desactivar el sensor de color
        try:
            self.habilitar_sensor(False)
        except:
            pass
        
        rospy.loginfo("‚úÖ Robot detenido y sensor desactivado")
        rospy.loginfo("üëã Saliendo del programa...")
        
        # Salir del programa
        sys.exit(0)

# ============================================
# FUNCI√ìN PRINCIPAL
# ============================================
def main():
    """
    Funci√≥n principal
    """
    try:
        # Crear detector
        detector = DetectorColor()
        
        # MEN√ö DE OPCIONES
        print("")
        print("=" * 60)
        print("üé® SENSOR DE COLOR - MEN√ö DE OPCIONES")
        print("=" * 60)
        print("")
        print("1. Modo Calibraci√≥n (recomendado primero)")
        print("   ‚Üí Obt√©n los valores RGB reales de tu pista")
        print("")
        print("2. Modo Monitoreo (solo observar colores)")
        print("   ‚Üí El robot NO se mover√°, solo mostrar√° colores detectados")
        print("")
        print("3. Modo Reacci√≥n (robot reacciona a colores)")
        print("   ‚Üí El robot SE MOVER√Å seg√∫n el color detectado")
        print("")
        print("=" * 60)
        print("")
        
        opcion = input("Seleccione una opci√≥n (1-3): ")
        
        if opcion == "1":
            detector.calibrar_colores(duracion_por_color=5.0)
        elif opcion == "2":
            detector.modo_monitoreo(duracion=30.0)
        elif opcion == "3":
            detector.modo_reaccion(duracion=60.0)
        else:
            rospy.logwarn("‚ùå Opci√≥n no v√°lida")
        
    except rospy.ROSInterruptException:
        rospy.loginfo("‚ùå Programa interrumpido")
    except KeyboardInterrupt:
        rospy.loginfo("‚ùå Programa interrumpido por teclado (Ctrl+C)")
    except Exception as e:
        rospy.logerr(f"‚ùå Error inesperado: {e}")
    finally:
        rospy.loginfo("")
        rospy.loginfo("üëã Finalizando programa")
        rospy.loginfo("")

# ============================================
# PUNTO DE ENTRADA
# ============================================
if __name__ == '__main__':
    main()

