#!/usr/bin/env python3

import rospy
import signal
import sys
import time
from geometry_msgs.msg import Twist
from std_srvs.srv import SetBool
from atriz_rvr_msgs.msg import Color
from atriz_rvr_msgs.srv import SetLEDRGB

class ColorMeasurementAnalysis:
    """An√°lisis completo de las posibilidades de medici√≥n de color sin LED."""
    
    def __init__(self):
        rospy.init_node('color_measurement_analysis', anonymous=True)
        
        # Variables
        self.running = True
        self.measurement_count = 0
        self.led_activation_attempts = 0
        
        # Configurar servicios
        self.setup_services()
        
        # Configurar se√±al de interrupci√≥n
        signal.signal(signal.SIGINT, self.signal_handler)
        
        rospy.loginfo("üî¨ An√°lisis de Medici√≥n de Color Sin LED")
        rospy.loginfo("=" * 60)
    
    def setup_services(self):
        """Configura los servicios necesarios."""
        try:
            rospy.wait_for_service('/enable_color', timeout=5.0)
            rospy.wait_for_service('/set_led_rgb', timeout=5.0)
            
            self.enable_color_service = rospy.ServiceProxy('/enable_color', SetBool)
            self.set_led_rgb_service = rospy.ServiceProxy('/set_led_rgb', SetLEDRGB)
            
            rospy.loginfo("‚úÖ Servicios configurados")
            
        except rospy.ROSException as e:
            rospy.logerr(f"‚ùå Error: {e}")
            rospy.logwarn("‚ö†Ô∏è Aseg√∫rate de que el driver del RVR est√© ejecut√°ndose")
            sys.exit(1)
    
    def signal_handler(self, signum, frame):
        """Maneja Ctrl+C."""
        rospy.loginfo("üõë Deteniendo...")
        self.running = False
        self.cleanup()
        sys.exit(0)
    
    def cleanup(self):
        """Limpia al finalizar."""
        try:
            # Detener robot
            cmd_vel_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
            twist = Twist()
            cmd_vel_pub.publish(twist)
            
            # Deshabilitar sensor
            try:
                self.enable_color_service(False)
                rospy.loginfo("üî¥ Sensor de color deshabilitado")
            except:
                pass
            
            rospy.loginfo("üßπ Limpieza completada")
            
        except Exception as e:
            rospy.logwarn(f"‚ö†Ô∏è Error en limpieza: {e}")
    
    def control_sensor_led(self, red, green, blue):
        """Controla el LED del sensor usando servicios ROS."""
        try:
            response = self.set_led_rgb_service(
                led_id=0x40000000,  # Bitmask para undercarriage_white
                red=red, green=green, blue=blue
            )
            if response.success:
                rospy.loginfo(f"‚úÖ LED del sensor controlado a RGB({red},{green},{blue})")
                return True
            else:
                rospy.logwarn(f"‚ö†Ô∏è Error controlando LED: {response.message}")
                return False
        except Exception as e:
            rospy.logwarn(f"‚ö†Ô∏è Error en servicio LED: {e}")
            return False
    
    def analyze_color_measurement_possibilities(self):
        """Analiza todas las posibilidades de medici√≥n de color."""
        rospy.loginfo("üîç AN√ÅLISIS DE POSIBILIDADES")
        rospy.loginfo("=" * 60)
        
        # 1. Verificar servicios disponibles
        rospy.loginfo("1Ô∏è‚É£ Verificando servicios disponibles...")
        try:
            rospy.loginfo("   ‚úÖ /enable_color - Disponible")
            rospy.loginfo("   ‚úÖ /set_led_rgb - Disponible")
            rospy.loginfo("   ‚ùå /get_rgbc_sensor_values - NO disponible como servicio ROS")
        except Exception as e:
            rospy.logwarn(f"   ‚ö†Ô∏è Error verificando servicios: {e}")
        
        # 2. Verificar t√≥picos disponibles
        rospy.loginfo("\n2Ô∏è‚É£ Verificando t√≥picos disponibles...")
        try:
            rospy.loginfo("   ‚úÖ /color - Disponible (requiere enable_color)")
            rospy.loginfo("   ‚ùå /rgbc_raw - NO disponible")
            rospy.loginfo("   ‚ùå /sensor_raw - NO disponible")
        except Exception as e:
            rospy.logwarn(f"   ‚ö†Ô∏è Error verificando t√≥picos: {e}")
        
        # 3. An√°lisis de la arquitectura
        rospy.loginfo("\n3Ô∏è‚É£ An√°lisis de la arquitectura del sistema...")
        rospy.loginfo("   üîß Hardware: Sensor de color con LED integrado")
        rospy.loginfo("   üîß Firmware: LED se activa autom√°ticamente con enable_color")
        rospy.loginfo("   üîß SDK: get_rgbc_sensor_values existe pero no expuesto en ROS")
        rospy.loginfo("   üîß Driver: Solo expone enable_color y streaming de color")
        
        # 4. Conclusi√≥n
        rospy.loginfo("\n4Ô∏è‚É£ CONCLUSI√ìN:")
        rospy.loginfo("   ‚ùå IMPOSIBLE hacer mediciones sin activar el LED")
        rospy.loginfo("   üìã Razones:")
        rospy.loginfo("      ‚Ä¢ El LED est√° integrado en el hardware del sensor")
        rospy.loginfo("      ‚Ä¢ El firmware activa el LED autom√°ticamente")
        rospy.loginfo("      ‚Ä¢ No hay acceso directo a datos raw del sensor")
        rospy.loginfo("      ‚Ä¢ get_rgbc_sensor_values no est√° expuesto en ROS")
    
    def demonstrate_led_activation_behavior(self):
        """Demuestra el comportamiento de activaci√≥n del LED."""
        rospy.loginfo("\nüéØ DEMOSTRACI√ìN DEL COMPORTAMIENTO")
        rospy.loginfo("=" * 60)
        
        # Paso 1: Verificar estado inicial
        rospy.loginfo("1Ô∏è‚É£ Estado inicial del sensor...")
        rospy.loginfo("   üîç Verificando si el sensor est√° habilitado...")
        
        # Paso 2: Intentar apagar LED antes de habilitar sensor
        rospy.loginfo("\n2Ô∏è‚É£ Intentando apagar LED antes de habilitar sensor...")
        self.control_sensor_led(0, 0, 0)
        rospy.loginfo("   ‚ö†Ô∏è Esto no tiene efecto si el sensor no est√° habilitado")
        
        # Paso 3: Habilitar sensor (esto activar√° el LED)
        rospy.loginfo("\n3Ô∏è‚É£ Habilitando sensor de color...")
        rospy.loginfo("   ‚ö†Ô∏è ADVERTENCIA: Esto activar√° el LED autom√°ticamente")
        
        try:
            response = self.enable_color_service(True)
            if response[0]:  # response es una tupla (success, message)
                rospy.loginfo("   ‚úÖ Sensor habilitado exitosamente")
                rospy.loginfo("   üü° LED del sensor: ACTIVADO AUTOM√ÅTICAMENTE")
                self.led_activation_attempts += 1
            else:
                rospy.logwarn(f"   ‚ö†Ô∏è Error habilitando sensor: {response[1]}")
                return False
        except Exception as e:
            rospy.logerr(f"   ‚ùå Error en servicio: {e}")
            return False
        
        # Paso 4: Intentar apagar LED despu√©s de habilitar sensor
        rospy.loginfo("\n4Ô∏è‚É£ Intentando apagar LED despu√©s de habilitar sensor...")
        self.control_sensor_led(0, 0, 0)
        rospy.loginfo("   ‚ö†Ô∏è El LED se reactivar√° en la siguiente medici√≥n")
        
        # Paso 5: Tomar medici√≥n y observar comportamiento
        rospy.loginfo("\n5Ô∏è‚É£ Tomando medici√≥n de color...")
        try:
            color_data = rospy.wait_for_message('/color', Color, timeout=5.0)
            
            self.measurement_count += 1
            r, g, b = color_data.rgb_color[0], color_data.rgb_color[1], color_data.rgb_color[2]
            confidence = color_data.confidence * 100
            
            rospy.loginfo(f"   üìä MEDICI√ìN #{self.measurement_count}")
            rospy.loginfo(f"      RGB: ({r:3d}, {g:3d}, {b:3d})")
            rospy.loginfo(f"      Confianza: {confidence:5.1f}%")
            rospy.loginfo(f"      LED: üü° REACTIVADO AUTOM√ÅTICAMENTE")
            
        except rospy.ROSException as e:
            rospy.logwarn(f"   ‚ö†Ô∏è Error tomando medici√≥n: {e}")
            return False
        
        return True
    
    def provide_alternatives(self):
        """Proporciona alternativas y soluciones."""
        rospy.loginfo("\nüí° ALTERNATIVAS Y SOLUCIONES")
        rospy.loginfo("=" * 60)
        
        rospy.loginfo("1Ô∏è‚É£ Soluciones T√©cnicas:")
        rospy.loginfo("   üîß Modificar el driver para exponer get_rgbc_sensor_values")
        rospy.loginfo("   üîß Crear un servicio ROS personalizado para acceso directo")
        rospy.loginfo("   üîß Usar el SDK directamente (como en el script anterior)")
        
        rospy.loginfo("\n2Ô∏è‚É£ Soluciones de Hardware:")
        rospy.loginfo("   üîß Usar un sensor de color externo")
        rospy.loginfo("   üîß Modificar el hardware del RVR (no recomendado)")
        
        rospy.loginfo("\n3Ô∏è‚É£ Soluciones de Software:")
        rospy.loginfo("   üîß Aceptar que el LED se active pero controlarlo despu√©s")
        rospy.loginfo("   üîß Usar mediciones puntuales en lugar de streaming continuo")
        rospy.loginfo("   üîß Implementar un sistema de control de LED m√°s sofisticado")
        
        rospy.loginfo("\n4Ô∏è‚É£ Recomendaci√≥n:")
        rospy.loginfo("   ‚úÖ La mejor opci√≥n es aceptar la activaci√≥n del LED")
        rospy.loginfo("   ‚úÖ Implementar control del LED despu√©s de cada medici√≥n")
        rospy.loginfo("   ‚úÖ Usar mediciones puntuales para minimizar el tiempo de activaci√≥n")
    
    def run_analysis(self):
        """Ejecuta el an√°lisis completo."""
        rospy.loginfo("üöÄ Iniciando an√°lisis completo...")
        
        # An√°lisis de posibilidades
        self.analyze_color_measurement_possibilities()
        
        # Demostraci√≥n del comportamiento
        if self.demonstrate_led_activation_behavior():
            rospy.loginfo("‚úÖ Demostraci√≥n completada exitosamente")
        else:
            rospy.logwarn("‚ö†Ô∏è Demostraci√≥n fall√≥")
        
        # Alternativas
        self.provide_alternatives()
        
        # Resumen final
        rospy.loginfo("\nüìã RESUMEN FINAL")
        rospy.loginfo("=" * 60)
        rospy.loginfo(f"   üìä Mediciones tomadas: {self.measurement_count}")
        rospy.loginfo(f"   üü° Intentos de activaci√≥n de LED: {self.led_activation_attempts}")
        rospy.loginfo("   ‚ùå Conclusi√≥n: IMPOSIBLE medir color sin activar LED")
        rospy.loginfo("   üí° Recomendaci√≥n: Usar control del LED despu√©s de mediciones")

def main():
    """Funci√≥n principal."""
    try:
        # Crear instancia
        analyzer = ColorMeasurementAnalysis()
        
        # Ejecutar an√°lisis
        analyzer.run_analysis()
        
        # Mantener el nodo vivo
        rospy.loginfo("\nüîÑ Nodo activo. Presiona Ctrl+C para salir.")
        while analyzer.running and not rospy.is_shutdown():
            rospy.sleep(0.1)
            
    except KeyboardInterrupt:
        rospy.loginfo("üõë Interrumpido por el usuario")
    except Exception as e:
        rospy.logerr(f"‚ùå Error: {e}")
    finally:
        rospy.loginfo("üëã Finalizando...")

if __name__ == '__main__':
    main()
